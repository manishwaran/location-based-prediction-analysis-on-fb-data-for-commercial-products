{
    "contents" : "require(Rfacebook)\nrequire(rjson)\nrequire(httpuv)\nrequire(RCurl)\nrequire(httr)\nrequire(graphics)\nrequire(ggplot2)\n\napp_id <- \"1670385699866744\"\nsec_id <- \"bb1f9c8cfbcca322a46f5f23a32b7a31\"\nemail <- \"manishwaran.np@gmail.com\"\npassword <- \"waranmanish54321\"\n\nnetwork_types <- c(\"Airtel\",\"Reliance\",\"Vodafone\",\"BSNL\",\"Idea\",\"Aircel\",\"Tata_Docomo\")\n\nurl.string <- sprintf(\"https://graph.facebook.com/oauth/access_token?client_id=%s&client_secret=%s&grant_type=client_credentials\",app_id,sec_id)\naccess_token <- getURL(url.string)\n\nfacebook <- function( path = \"me\", access_token, options)\n{\n  if( !missing(options) ){\n    options <- sprintf( \"?%s\", paste( names(options), \"=\", unlist(options), collapse = \"&\", sep = \"\" ) )\n  } else {\n    options <- \"\"\n  }\n  if( regexpr(\"access_token=\", path) <= 0 ){\n    data <- getURL( sprintf( \"https://graph.facebook.com/%s%s?limit=2&access_token=%s&format=json\", path, options, access_token ) )\n  } else {\n    data <- getURL( sprintf(path) )\n    \n  }\n  fromJSON( data )\n}\n\nfacebook.login <- function(email, password, verbose=TRUE) \n{\n  \n  if (!require(RCurl)) stop(\"Install RCurl before using this function!\")\n  \n  cookie <- tempfile()\n  \n  CHandle = getCurlHandle()\n  curlSetOpt(.opts=list(\n    useragent = \"Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.6) Gecko/2009011913 Firefox/3.0.6 (.NET CLR 3.5.30729)\",\n    header = 0,\n    followlocation = 1,\n    ssl.verifypeer = TRUE,\n    cookiejar = cookie,\n    cookiefile = cookie),\n    curl = CHandle, verbose = verbose)\n  \n  getURL(\"https://login.facebook.com/login.php?login_attempt=1\", curl = CHandle)\n  x<-c(1);\n  postForm(\"https://login.facebook.com/login.php?login_attempt=1\", curl = CHandle,\n           locale = \"en_US\",\n           email = email,\n           pass = password)\n  return(CHandle) \n}      \n\nget.ids <- function(id)\n{\n  id_set <- vector(id)\n  count <- c(150)\n  for(i in 1:count)\n  {\n    tem_url<-sprintf(\"%s/friends\",id_set[i])\n    tem_id <- facebook(tem_url,access_token = access_token)\n    id_set<-c(id_set,tem_id$id)\n  }\n  return(id_set)\n}\n\nget.likes<-function(id_vector)\n{\n  count <- c(length(network_types))\n  open.connection(\"dataset.csv\",open = \"a+\",blocking = TRUE)\n  name <- c()\n  location <- c()\n  nw<-c()\n  for(i in 1:length(id_vector))\n  {\n    nw<-c()\n    tem_id<-c(id_vector[i])\n    tem_user<-facebook(path=sprintf(\"%s\",id_vector[i]),token = access_token)\n    name<-tem_user$name\n    location<-tem_user$location\n    gender<-tem_user$gender\n    tem_url<-sprintf(\"https://www.facebook.com/%s/likes\",tem_name)\n    html_file<-getURL(tem_url)\n    for(j in 1:count)\n    {\n      x<-grep(sprintf(\"*%s*\",network_types[j]),html_file,ignore.case = TRUE)\n      if(length(x)==0)\n      {\n        y<-c(\"NA\")\n      }\n      else\n      {\n        y<-network_types[j]\n      }\n      nw<-c(nw,y)\n    }\n    user_data<-c(name,location,gender,tem_id,y) \n    write.csv(user_data,\"dataset.csv\",sep = \",\")\n  }\n  close.connection(\"dataset.csv\")\n}\n\nread.dataset <- function(url_string)\n{\n  dataset <- read.csv(file = url_string,header = TRUE,sep = \",\")\n  return(dataset)\n}\n\n\ninsertRow2 <- function(existingDF, newrow, r) \n{\n  existingDF <- rbind(existingDF,newrow)\n  existingDF <- existingDF[order(c(1:(nrow(existingDF)-1),r-0.5)),]\n  row.names(existingDF) <- 1:nrow(existingDF)\n  return(existingDF)  \n}\n\n\nget.location_data<- function(data_set,location)\n{\n  \n  tem_dataset<-as.data.frame(matrix(ncol = ncol(data_set),nrow = 1))\n  names(tem_dataset)<-c(names(data_set))\n  pattern<-sprintf(\"*%s*\",location)\n  print(pattern)\n  for(i in 1:nrow(data_set))\n  {\n    print(data_set[i,\"Location\"])\n    print(i)\n    if(isTRUE(length(grep(pattern = pattern,data_set[i,\"Location\"],ignore.case = TRUE))!=0))\n    {\n      tem<-c(data_set[i,])\n      print(\"hai\")\n      tem_dataset<-insertRow2(tem_dataset,tem,nrow(tem_dataset)+1)\n    }\n  }\n  return(tem_dataset)\n}\n\nget.count <- function(col_set,not)\n{\n  count<-0\n  for(i in 1:length(col_set))\n  {\n    if(isTRUE(not!=col_set[i]))\n    {\n      count<-count+1\n    }  \n  }\n  return(count)\n}\n\nget.plot_point <- function(data_set)\n{\n  data_point<-as.list.default(rep(0,length(network_types)))\n  names(data_point)<-network_types\n  for(i in 1:length(network_types))\n  {\n    data_point[network_types[i]] <- get.count(data_set[[network_types[i]]],\"NA\")\n  }\n  return(data_point)\n}\n\nreform_data <- function(data_set)\n{\n  new_set <- as.data.frame(matrix(ncol = 3,nrow = 1))\n  name_data<-c(\"Name\",\"Location\",\"Network\")\n  names(new_set)<-name_data\n  count<-0\n  for(i in 1:nrow(data_set))\n  {\n    name<-data_set[i,\"Names\"]\n    location<-data_set[i,\"Location\"]\n    for(j in network_types)\n    {\n      if(isTRUE(data_set[i,j]!=\"NA\"))\n      {\n        tem<-list(name,location,data_set[[i,j]])\n        new_set<-insertRow2(new_set,tem,nrow(new_set)+1)\n        count<-count+1\n      }\n    }\n  }\n  return(new_set)\n}\n\nget.most_reached <- function(data_set)\n{\n  result_set<-list()\n  max_index<-0\n  max_value<-0\n  for(i in 1:length(x))\n  {\n    if(as.numeric(data_set[i])>as.numeric(max_value))\n    {\n      max_value<-data_set[i]\n      max_index<-i\n    }\n  }\n  result_set<-max_value\n  names(result_set)<-names(data_set[max_index])\n  return(result_set)\n}\n\nmain <- function()\n{\n  url_string<-readline(\"Enter the data set path : \")\n  fb_data<-read.dataset(url_string = url_string)\n  hit<-readline(\"Hit a key to see the data set : \")\n  fb_data\n  loc<-readline(\"Enter the city u want to mine : \")\n  loc<-c(\"chennai\")\n  location_data<-get.location_data(fb_data,loc)\n  plot_point<-get.plot_point(location_data)\n  most_reached<-get.most_reached(plot_point)\n  print(\"Most reached product is \")\n  print(most_reached)\n  tem<-plot_point\n  tem[names(most_reached)]<--1\n  competitor<-get.most_reached(tem)\n  out<-sprintf(\"Competitor of %s(%d) is %s(%d)\",names(most_reached),as.numeric(most_reached),names(competitor),as.numeric(competitor))\n  print(out)\n  new_dataset<-reform_data(location_data)\n  print(\"New Dataset According to user selection is...\")\n  hit<-readline(\"Hit a key to see the new dataset : \")\n  new_dataset\n  #most_reached <- get.most_reached(plot_point)\n  hit<-readline(\"Hit a key to continue..\")\n  ggplot(new_dataset, aes(Location, fill=Network)) + geom_bar(position=\"dodge\")\n  hit<-readline(\"Hit a key to overall statistics\")\n  new_data<-reform_data(fb_data)\n  ggplot(new_data, aes(Location, fill=Network)) + geom_bar(position=\"dodge\")\n}\nmain()",
    "created" : 1451924526443.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1604051553",
    "id" : "B0A23CE9",
    "lastKnownWriteTime" : 1452068708,
    "path" : "C:/Users/Manishwaran/Desktop/Main Project/R/facebook_mining_likes.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}